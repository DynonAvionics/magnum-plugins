/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
                2020, 2021, 2022, 2023, 2024, 2025
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page cmake-plugins Plugin usage with CMake
@brief Guide how to find and use static Magnum plugins with CMake build system

@tableofcontents
@m_footernavigation

If you are going to use dynamic plugins (the default) via a plugin manager,
they don't need to be linked via CMake as the manager will look for them at
runtime at specified location and loads them dynamically --- but if you are
using them via a CMake subproject, additional steps need to be taken so CMake
knows you need them to be built.

If plugins are built as static (see @ref building-plugins for more
information), they need to be linked into the executable and then explicitly
imported. Also if you are going to use them as dependencies, you need to find
the dependency and then link to it.

@note
    Plugin usage on the C++ side is the same for both static and dynamic
    plugins. Refer to @ref plugins for more information.

@section cmake-plugins-installed Using Magnum Plugins that were externally built and installed

The main logic is in the [FindMagnumPlugins.cmake](https://github.com/mosra/magnum-plugins/blob/master/modules/FindMagnumPlugins.cmake)
module distributed in the `modules/` directory of the plugins repository,
you are encouraged to copy it into your project and add path to the files to
`CMAKE_MODULE_PATH`:

@code{.cmake}
# Path where FindMagnumPlugins.cmake can be found, adapt as needed
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/modules/" ${CMAKE_MODULE_PATH})
@endcode

Otherwise, if CMake won't be able to find this file in predefined locations, it
will error out even if Magnum Plugins might be installed on the system. Note
that the module files are updated as the library evolves, you are encouraged to
update your copies from time to time to avoid strange building issues.

If you installed the library or its dependencies to non-standard location
(other than `/usr`, e.g. `/home/xyz/projects`), set `CMAKE_PREFIX_PATH` to that
directory to help CMake find it. You can enter more different dirs if you
separate them with semicolons.

@section cmake-plugins-subproject Using Magnum Plugins as a CMake subproject

Continuing from @ref cmake-subproject, adding Magnum Plugins is very similar.
Again, the @ref building-plugins-features "Plugins build-time options" have to
be specified before the subdirectory gets added:

@code{.cmake}
...

set(MAGNUM_WITH_STBIMAGEIMPORTER ON CACHE BOOL "" FORCE) # enable what you need
add_subdirectory(magnum-plugins EXCLUDE_FROM_ALL)

find_package(MagnumPlugins REQUIRED ...) # see below
@endcode

Please note that in case of the (by default) dynamic plugins, because these are
loaded at runtime, CMake doesn't know we need them to be built --- one option
is to list them explicitly like shown below, another (but uglier) is to not use
`EXCLUDE_FROM_ALL` on the `magnum` subdirectory, so everything is always built
implicitly.

@code{.cmake}
set(MAGNUM_WITH_STBIMAGEIMPORTER ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_TINYGLTFIMPORTER ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-plugins EXCLUDE_FROM_ALL)

# So the StbImageImporter / TinyGltfImporter gets built implicitly
add_dependencies(your-app
    MagnumPlugins::StbImageImporter
    MagnumPlugins::TinyGltfImporter)
@endcode

Each plugin class provides further information about additional steps needed
for a CMake subproject setup.

@section cmake-plugins-find-module Finding the package and its components

Basic usage is:

@code{.cmake}
find_package(MagnumPlugins REQUIRED)
@endcode

This command tries to find Magnum plugins and then defines:

-   `MagnumPlugins_FOUND` --- Whether Magnum plugins were found

This command will not try to find any actual plugin. The plugins are:

-   `AssimpImporter` --- @ref Trade::AssimpImporter "AssimpImporter" plugin
-   `AstcImporter` --- @relativeref{Trade,AstcImporter} plugin
-   `BasisImageConverter` --- @ref Trade::BasisImageConverter "BasisImageConverter" plugin
-   `BasisImporter` --- @ref Trade::BasisImporter "BasisImporter" plugin
-   `BcDecImageConverter` --- @relativeref{Trade,BcDecImageConverter} plugin
-   `CgltfImporter` @m_class{m-label m-danger} **deprecated** ---
    @ref Trade::CgltfImporter "CgltfImporter" plugin
-   `DdsImporter` --- @ref Trade::DdsImporter "DdsImporter" plugin
-   `DevIlImageImporter` --- @ref Trade::DevIlImageImporter "DevIlImageImporter"
    plugin
-   `DrFlacAudioImporter` --- @ref Audio::DrFlacImporter "DrFlacAudioImporter"
    plugin
-   `DrMp3AudioImporter` --- @ref Audio::DrMp3Importer "DrMp3AudioImporter"
    plugin
-   `DrWavAudioImporter` --- @ref Audio::DrWavImporter "DrWavAudioImporter"
    plugin
-   `EtcDecImageConverter` --- @relativeref{Trade,EtcDecImageConverter} plugin
-   `Faad2AudioImporter` --- @ref Audio::Faad2Importer "Faad2AudioImporter"
    plugin
-   `FreeTypeFont` --- @ref Text::FreeTypeFont "FreeTypeFont" plugin
-   `GlslangShaderConverter` --- @ref ShaderTools::GlslangConverter "GlslangShaderConverter"
    plugin
-   `GltfImporter`--- @relativeref{Trade,GltfImporter} plugin
-   `GltfSceneConverter` --- @relativeref{Trade,GltfSceneConverter} plugin
-   `HarfBuzzFont` --- @ref Text::HarfBuzzFont "HarfBuzzFont" plugin
-   `IcoImporter` --- @ref Trade::IcoImporter "IcoImporter" plugin
-   `JpegImageConverter` --- @ref Trade::JpegImageConverter "JpegImageConverter"
    plugin
-   `JpegImporter` --- @ref Trade::JpegImporter "JpegImporter" plugin
-   `KtxImageConverter` --- @ref Trade::KtxImageConverter "KtxImageConverter"
    plugin
-   `KtxImporter` --- @ref Trade::KtxImporter "KtxImporter" plugin
-   `MeshOptimizerSceneConverter` ---
    @ref Trade::MeshOptimizerSceneConverter "MeshOptimizerSceneConverter"
    plugin
-   `MiniExrImageConverter` --- @ref Trade::MiniExrImageConverter "MiniExrImageConverter"
    plugin
-   `OpenExrImageConverter` --- @ref Trade::OpenExrImageConverter "OpenExrImageConverter"
    plugin
-   `OpenExrImporter` --- @ref Trade::OpenExrImporter "OpenExrImporter" plugin
-   `OpenGexImporter` --- @ref Trade::OpenGexImporter "OpenGexImporter" plugin
-   `PngImageConverter` --- @ref Trade::PngImageConverter "PngImageConverter"
    plugin
-   `PngImporter` --- @ref Trade::PngImporter "PngImporter" plugin
-   `ResvgImporter` --- @relativeref{Trade,ResvgImporter} plugin
-   `PrimitiveImporter` --- @ref Trade::PrimitiveImporter "PrimitiveImporter"
    plugin
-   `SpirvToolsShaderConverter` --- @ref ShaderTools::SpirvToolsConverter "SpirvToolsShaderConverter"
-   `SpngImporter` --- @relativeref{Trade,SpngImporter} plugin
-   `StanfordImporter` --- @ref Trade::StanfordImporter "StanfordImporter"
    plugin
-   `StanfordSceneConverter` --- @ref Trade::StanfordSceneConverter "StanfordSceneConverter"
    plugin
-   `StbDxtImageConverter` --- @relativeref{Trade,StbDxtImageConverter} plugin
-   `StbImageConverter` --- @ref Trade::StbImageConverter "StbImageConverter"
    plugin
-   `StbImageImporter` --- @ref Trade::StbImageImporter "StbImageImporter"
    plugin
-   `StbResizeImageConverter` --- @relativeref{Trade,StbResizeImageConverter}
    plugin
-   `StbTrueTypeFont` --- @ref Text::StbTrueTypeFont "StbTrueTypeFont" plugin
-   `StbVorbisAudioImporter` --- @ref Audio::StbVorbisImporter "StbVorbisAudioImporter"
    plugin
-   `StlImporter` --- @ref Trade::StlImporter "StlImporter" plugin
-   `TinyGltfImporter` @m_class{m-label m-danger} **deprecated** ---
    @ref Trade::TinyGltfImporter "TinyGltfImporter" plugin
-   `UfbxImporter` --- @relativeref{Trade,UfbxImporter} plugin
-   `WebPImporter` --- @relativeref{Trade,WebPImporter} plugin

Some plugins expose their internal state through separate libraries. The
libraries are:

-   `OpenDdl` --- @ref OpenDdl library

Note that each plugin class / library namespace contains more detailed
information about dependencies, availability on particular platform and also
guide how to enable given library in build and use it with CMake.

Example usage with specifying the plugins is:

@code{.cmake}
find_package(MagnumPlugins REQUIRED FreeTypeFont PngImporter)
@endcode

For each plugin is then defined:

-   `MagnumPlugins_*_FOUND` --- Whether the plugin was found
-   `MagnumPlugins::*` --- Plugin imported target

The package is found if either debug or release version of each requested
plugin is found. If both debug and release plugins are found, proper version is
chosen based on actual build configuration of the project (i.e. `Debug` build
is linked to debug plugins, `Release` build to release plugins). See @ref cmake
for more information about autodetection of `MAGNUM_PLUGINS_DIR`.

See also @ref cmake "Magnum usage with CMake" for more information.
*/
}
